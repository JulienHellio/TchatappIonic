{"version":3,"sources":["webpack:///./src/app/list-message/list-message.module.ts","webpack:///./src/app/list-message/list-message.page.html","webpack:///./src/app/list-message/list-message.page.scss","webpack:///./src/app/list-message/list-message.page.ts","webpack:///./src/app/list-message/messages.service.ts"],"names":[],"mappings":"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","file":"list-message-list-message-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { ListMessagePage } from './list-message.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ListMessagePage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [ListMessagePage]\n})\nexport class ListMessagePageModule {}\n","module.exports = \"<ion-header >\\n    <ion-toolbar>\\n      <ion-title>\\n          <ion-row><ion-icon name=\\\"laptop\\\" class=\\\"ion-margin-end\\\"></ion-icon>TChat</ion-row>\\n      </ion-title>\\n    </ion-toolbar>\\n</ion-header>\\n\\n<ion-content padding>\\n    <ion-list>\\n        <ion-list-header>\\n          Messages  \\n        </ion-list-header> \\n        <ion-item *ngFor=\\\"let msg of messages\\\">\\n          <ion-grid>\\n          <ion-row>\\n            <h4>{{msg.message}}</h4>\\n          </ion-row>\\n          <ion-row>\\n            <p class=\\\"ion-margin-end\\\"><ion-icon name=\\\"contact\\\" class=\\\"ion-padding-top\\\"></ion-icon> {{msg.username}}</p>\\n            <p class=\\\"ion-padding-top\\\"><i>{{msg.date | date: 'HH:mm dd/MM/yyyy'}}</i></p>\\n          </ion-row>\\n        </ion-grid>\\n        </ion-item>\\n      </ion-list>  \\n\\n</ion-content>\\n<ion-footer>\\n    <ion-col class=\\\"ion-margin-bottom\\\">\\n      <ion-input [(ngModel)]=\\\"message\\\" clearInput placeholder=\\\"Your message\\\" value=\\\"\\\"></ion-input>\\n      <ion-button expand=\\\"full\\\" (click)=\\\"send();\\\" >Send</ion-button>\\n    </ion-col> \\n    <ion-toolbar>\\n        \\n        <ion-tabs>\\n            <ion-tab-bar slot=\\\"bottom\\\">\\n              <ion-tab-button tab=\\\"schedule\\\">\\n                  <ion-icon name=\\\"chatbubbles\\\"></ion-icon>\\n                <ion-label>Messages</ion-label>\\n                <ion-badge></ion-badge>\\n              </ion-tab-button>\\n          \\n              <ion-tab-button tab=\\\"users\\\" [routerLink]=\\\"['/user']\\\">\\n                <ion-icon name=\\\"contacts\\\"></ion-icon>\\n                <ion-label>Users</ion-label>\\n              </ion-tab-button>\\n          \\n            </ion-tab-bar>\\n          </ion-tabs>\\n      </ion-toolbar>\\n  </ion-footer>\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2xpc3QtbWVzc2FnZS9saXN0LW1lc3NhZ2UucGFnZS5zY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\nimport { MessagesService } from './messages.service';\n\n@Component({\n  selector: 'app-list-message',\n  templateUrl: './list-message.page.html',\n  styleUrls: ['./list-message.page.scss'],\n})\nexport class ListMessagePage implements OnInit {\n\n  public message : string;\n  public messages : any = [];\n\n  constructor(public messagesService: MessagesService) { }\n  \n  ngOnInit() {\n    this.load();\n  }\n\n  public load() {\n\n    this.messagesService.getMessages()\n      .subscribe(res => {\n        console.log('Messages récupés!');\n        this.messages = res.json();   \n      }, (err) => {\n        console.log('Erreur affichage', err);\n      })\n  }\n\n  public send() {\n    console.log(\"Register clicked for \" + this.message);\n    this.messagesService.sendMsg(this.message)\n      .subscribe(res => {\n        console.log('Message envoyé!');\n        this.load();\n      }, (err) => {\n        console.log('Send Error', err);\n      })\n    \n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Http, Headers, Response } from '@angular/Http';\nimport { Observable } from 'rxjs';\nimport { headersToString } from 'selenium-webdriver/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MessagesService {\n\n  constructor(public http: Http) { }\n\n  public getMessages(): Observable<Response> {\n\n    const headers = new Headers();\n\n    headers.append('Content-type', 'application/x-www-form-urlencoded');\n    headers.append('token', sessionStorage.getItem('token'));\n\n    return this.http.get('http://cesi.cleverapps.io/messages', { headers: headers });\n  }\n  public sendMsg(msg: string) {\n    let params = 'message=' + msg;\n    console.log(params);\n    const headers = new Headers();\n\n    headers.append('Content-type', 'application/x-www-form-urlencoded');\n    headers.append('token', sessionStorage.getItem('token'));\n    return this.http.post('http://cesi.cleverapps.io/messages', params, { headers: headers });\n  }\n}"],"sourceRoot":""}